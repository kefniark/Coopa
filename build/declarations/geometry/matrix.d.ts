export declare class DOMMatrix {
    get m11(): any;
    set m11(value: any);
    get m12(): any;
    set m12(value: any);
    get m13(): any;
    set m13(value: any);
    get m14(): any;
    set m14(value: any);
    get m21(): any;
    set m21(value: any);
    get m22(): any;
    set m22(value: any);
    get m23(): any;
    set m23(value: any);
    get m24(): any;
    set m24(value: any);
    get m31(): any;
    set m31(value: any);
    get m32(): any;
    set m32(value: any);
    get m33(): any;
    set m33(value: any);
    get m34(): any;
    set m34(value: any);
    get m41(): any;
    set m41(value: any);
    get m42(): any;
    set m42(value: any);
    get m43(): any;
    set m43(value: any);
    get m44(): any;
    set m44(value: any);
    get a(): any;
    set a(value: any);
    get b(): any;
    set b(value: any);
    get c(): any;
    set c(value: any);
    get d(): any;
    set d(value: any);
    get e(): any;
    set e(value: any);
    get f(): any;
    set f(value: any);
    values: Float64Array;
    is2D: boolean;
    get isIdentity(): boolean;
    static fromMatrix(init: DOMMatrix | SVGMatrix): DOMMatrix;
    static fromFloat32Array(init: Float32Array): DOMMatrix;
    static fromFloat64Array(init: Float64Array): DOMMatrix;
    constructor(init?: Float64Array | Float32Array | number[] | string);
    inspect(depth: number): string;
    multiply(other: DOMMatrix): any;
    multiplySelf(other: DOMMatrix): this;
    preMultiplySelf(other: DOMMatrix): this;
    translate(tx?: number, ty?: number, tz?: number): any;
    translateSelf(tx?: number, ty?: number, tz?: number): this;
    scale(scaleX?: number, scaleY?: number, scaleZ?: number, originX?: number, originY?: number, originZ?: number): any;
    scale3d(scale?: number, originX?: number, originY?: number, originZ?: number): any;
    scale3dSelf(scale?: number, originX?: number, originY?: number, originZ?: number): this;
    scaleSelf(scaleX?: number, scaleY?: number, scaleZ?: number, originX?: number, originY?: number, originZ?: number): this;
    rotateFromVector(x?: number, y?: number): any;
    rotateFromVectorSelf(x?: number, y?: number): this;
    rotate(rotX?: number, rotY?: number, rotZ?: number): any;
    rotateSelf(rotX?: number, rotY?: number, rotZ?: number): this;
    rotateAxisAngle(x: number, y: number, z: number, angle: number): any;
    rotateAxisAngleSelf(x?: number, y?: number, z?: number, angle?: number): this;
    skewX(sx: number): any;
    skewXSelf(sx: number): this;
    skewY(sy: number): any;
    skewYSelf(sy: number): this;
    flipX(): any;
    flipY(): any;
    inverse(): any;
    invertSelf(): void;
    setMatrixValue(transformList: string): this;
    transformPoint(point: DOMPoint): DOMPoint;
    toFloat32Array(): Float32Array;
    toFloat64Array(): Float64Array;
    toString(): string;
}
